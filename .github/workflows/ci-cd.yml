name: Browser Extension CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install eslint jest --save-dev
        
    - name: Create ESLint config
      run: |
        echo '{
          "env": {
            "browser": true,
            "es2021": true,
            "webextensions": true
          },
          "extends": "eslint:recommended",
          "parserOptions": {
            "ecmaVersion": "latest",
            "sourceType": "module"
          },
          "rules": {
            "no-unused-vars": "warn"
          }
        }' > .eslintrc.json
        
    - name: Set up test file
      run: |
        mkdir -p tests
        echo 'const fs = require("fs");
        
        test("manifest.json exists and is valid", () => {
          const manifest = JSON.parse(fs.readFileSync("manifest.json"));
          expect(manifest.manifest_version).toBeDefined();
          expect(manifest.name).toBeDefined();
          expect(manifest.version).toBeDefined();
        });
        
        test("content.js exists", () => {
          expect(fs.existsSync("content.js")).toBe(true);
        });
        
        test("styles.css exists", () => {
          expect(fs.existsSync("styles.css")).toBe(true);
        });' > tests/extension.test.js
        
    - name: Add Jest config to package.json
      run: |
        npm pkg set "scripts.test"="jest"
        npm pkg set "jest"="{\"testEnvironment\": \"node\"}"
        
    - name: Lint files
      run: npx eslint .
      
    - name: Run tests
      run: npm test
      
  build-and-release:
    needs: lint-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Create zip package
      run: |
        mkdir -p dist
        zip -r dist/word-definition-extension.zip . -x "*.git*" "node_modules/*" "tests/*" "dist/*" "*.md" "package*.json"
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/word-definition-extension.zip
        asset_name: word-definition-extension.zip
        asset_content_type: application/zip